name: "Provision Infrastructure"
on:
  repository_dispatch:
    types: [ provision-command ]
jobs:
  provision:
    runs-on: ubuntu-latest
    steps:
      - name: ⚙️ Configure GitHub Actions
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: ⚙️ Configure Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: ✍️ Branch name
        uses: actions/github-script@v6
        id: branch
        env:
          ISSUE: ${{ toJson(github.event.client_payload.github.payload.issue) }}
        with:
          script: |
            const issue = JSON.parse(process.env.ISSUE);
            const kebabCase = string => string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/\s+/g, '-').toLowerCase()
            const feature = kebabCase(issue.title)
            const label = issue.labels.find(({name}) => name === 'feat' || name === 'refactor' || name === 'fix')
            return {
              branch: `${label.name}/issue-${issue.number}/${feature}`,
              feature
            }

      - name: 🛠 Create branch
        uses: peterjgrainger/action-create-branch@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: ${{ fromJSON(steps.branch.outputs.result).branch }}

      - name: 🛠 Initialize Terraform
        working-directory: ./aws/feature
        run: terraform init

      - name: ♻️ Workspace
        working-directory: ./aws/feature
        run: terraform workspace new ${{ fromJSON(steps.branch.outputs.result).feature }}

      - name: 📚 Terraform plan
        id: terraform_plan
        working-directory: ./aws/feature
        run: |
          terraform plan -input=false \
          -var="env_branch=${{ fromJSON(steps.branch.outputs.result).branch }}" \
          -var="env_feature=${{ fromJSON(steps.branch.outputs.result).feature }}" \
          -var="app_id=${{ github.event.client_payload.slash_command.args.named.app_id }}

      - name: 🏗 Provision Infrastructure
        id: terraform_apply
        working-directory: ./aws/feature
        run: |
          terraform apply -auto-approve \
          -var="env_branch=${{ fromJSON(steps.branch.outputs.result).branch }}" \
          -var="env_feature=${{ fromJSON(steps.branch.outputs.result).feature }}" \
          -var="app_id=${{ github.event.client_payload.slash_command.args.named.app_id }}

      - name: 📚 Terraform output
        id: terraform_output
        working-directory: ./aws/feature
        run: terraform output -no-color

      - name: 🤖 Bot comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: rocket
          body: |
            🏗 Feature **${{ fromJSON(steps.branch.outputs.result).feature }}** on **${{ fromJSON(steps.branch.outputs.result).branch }}**
            - 🚧 Plan finished `${{ steps.terraform_plan.outcome }}`
            - 🚧 Apply finished `${{ steps.terraform_apply.outcome }}`

            #### 📖 Workspace outputs
            ```
            ${{ steps.terraform_output.outputs.stdout }}
            ```